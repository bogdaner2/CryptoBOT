// <auto-generated />
using CryptoTrackerAPI.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CryptoTrackerAPI.DAL.Data.Migrations
{
    [DbContext(typeof(CryptoTrackerDbContext))]
    [Migration("20181030195953_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.Crypto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.CryptoMarket", b =>
                {
                    b.Property<int>("CryptoId");

                    b.Property<int>("MarketId");

                    b.Property<int>("Id");

                    b.HasKey("CryptoId", "MarketId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("CryptoMarket");
                });

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.Market", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CryptoId");

                    b.Property<int>("MarketId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CryptoId");

                    b.HasIndex("MarketId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.CryptoMarket", b =>
                {
                    b.HasOne("CryptoTrackerAPI.DAL.Entities.Crypto", "Crypto")
                        .WithMany("CryptoMarkets")
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoTrackerAPI.DAL.Entities.Market", "Market")
                        .WithMany("CryptoMarkets")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CryptoTrackerAPI.DAL.Entities.Subscription", b =>
                {
                    b.HasOne("CryptoTrackerAPI.DAL.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CryptoTrackerAPI.DAL.Entities.Market", "Market")
                        .WithMany()
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
